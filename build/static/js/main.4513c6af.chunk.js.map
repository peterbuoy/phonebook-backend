{"version":3,"sources":["services/persons.js","components/Notification.js","components/PersonForm.js","components/PersonList.js","components/Filter.js","App.js","index.js"],"names":["baseUrl","personService","getAll","axios","get","then","response","data","create","personObject","post","remove","id","delete","update","put","Notification","selectedStyle","message","messageType","color","fontStyle","borderRadius","fontSize","border","style","className","PersonForm","handleAddPerson","handleNewName","handleNewNumber","onSubmit","onChange","type","PersonList","persons","filter","handleDelete","filteredPersons","person","name","toLowerCase","includes","map","number","onClick","Filter","handleNewFilter","App","useState","notification","setNotification","setFilter","setPersons","newName","setNewName","newNumber","setNewNumber","useEffect","personData","event","target","value","preventDefault","isNameUnique","some","concat","setTimeout","catch","error","console","log","window","confirm","find","newPersons","findIndex","err","personName","personID","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4513c6af.chunk.js","sourcesContent":["import axios from \"axios\";\nconst baseUrl = \"api/persons\";\n\nconst getAll = () => {\n  const request = axios.get(baseUrl);\n  return request.then((response) => response.data);\n};\n\nconst create = (personObject) => {\n  return axios.post(baseUrl, personObject);\n};\n\nconst remove = (id) => {\n  return axios.delete(`${baseUrl}/${id}`);\n};\n\nconst update = (id, personObject) => {\n  return axios.put(`${baseUrl}/${id}`, personObject);\n};\n\nconst personService = { getAll, create, remove, update };\n\nexport default personService;\n","const Notification = ({ message, messageType }) => {\n  let selectedStyle;\n  const successStyle = {\n    color: \"green\",\n    fontStyle: \"italic\",\n    borderRadius: \"5px\",\n    fontSize: \"2em\",\n    border: \"0.2em solid green\",\n  };\n  const errorStyle = {\n    color: \"red\",\n    fontStyle: \"bold\",\n    borderRadius: \"5px\",\n    fontSize: \"2em\",\n    border: \"0.2em dashed red\",\n  };\n\n  messageType === \"error\"\n    ? (selectedStyle = errorStyle)\n    : (selectedStyle = successStyle);\n\n  if (message === null) return null;\n\n  return (\n    <div style={selectedStyle} className=\"notification\">\n      {message}\n    </div>\n  );\n};\n\nexport default Notification;\n","const PersonForm = ({ handleAddPerson, handleNewName, handleNewNumber }) => {\n  return (\n    <div>\n      <h2>Add New</h2>\n      <form onSubmit={handleAddPerson}>\n        <div>\n          name: <input onChange={handleNewName} />\n        </div>\n        <div>\n          number: <input onChange={handleNewNumber} />\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default PersonForm;\n","const PersonList = ({ persons, filter, handleDelete }) => {\n  const filteredPersons = persons.filter((person) =>\n    person.name.toLowerCase().includes(`${filter.toLowerCase()}`)\n  );\n  return (\n    <div>\n      {filteredPersons.map((person) => (\n        <div key={person.id}>\n          {person.name} {person.number}{\" \"}\n          <button onClick={() => handleDelete(person.name, person.id)}>\n            delete\n          </button>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default PersonList;\n","const Filter = ({ handleNewFilter }) => {\n  return (\n    <div>\n      filter shown with <input onChange={handleNewFilter} />\n    </div>\n  );\n};\nexport default Filter;\n","import React, { useState, useEffect } from \"react\";\nimport personService from \"./services/persons\";\nimport Notification from \"./components/Notification\";\nimport PersonForm from \"./components/PersonForm\";\nimport PersonList from \"./components/PersonList\";\nimport Filter from \"./components/Filter\";\n\nconst App = () => {\n  const [notification, setNotification] = useState({\n    message: null,\n    messageType: null,\n  });\n  const [filter, setFilter] = useState(\"\");\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState(\"\");\n  const [newNumber, setNewNumber] = useState(\"\");\n\n  useEffect(() => {\n    personService.getAll().then((personData) => {\n      setPersons(personData);\n    });\n  }, []);\n\n  const handleAddPerson = (event) => {\n    event.preventDefault();\n    const isNameUnique = !persons.some((person) => person.name === newName);\n\n    const personObject = { name: `${newName}`, number: `${newNumber}` };\n    if (isNameUnique) {\n      personService\n        .create(personObject)\n        .then((response) => {\n          setPersons(persons.concat(response.data));\n          setNotification({\n            message: `Added ${newName}`,\n            messageType: \"success\",\n          });\n          setTimeout(() => {\n            setNotification({\n              message: null,\n              messageType: null,\n            });\n          }, 4000);\n        })\n        .catch((error) => console.log(error));\n    } else {\n      const confirmReplacement = window.confirm(\n        `${newName} is already added to phonebook, replace the old number with new one?`\n      );\n      if (confirmReplacement) {\n        const id = persons.find((person) => person.name === newName).id;\n        personService\n          .update(id, personObject)\n          .then(() => {\n            const newPersons = [...persons];\n            const personIndex = persons.findIndex(\n              (person) => person.name === newName\n            );\n            newPersons[personIndex].number = newNumber;\n            setPersons(newPersons);\n            setNotification({\n              message: `Updated ${newName}`,\n              messageType: \"success\",\n            });\n            setTimeout(() => {\n              setNotification({\n                message: null,\n                messageType: null,\n              });\n            }, 4000);\n          })\n          .catch((err) => {\n            setNotification({\n              message: `Oops, ${newName} has already been deleted`,\n              messageType: \"error\",\n            });\n            setTimeout(() => {\n              setNotification({\n                message: null,\n                messageType: null,\n              });\n            }, 4000);\n            setPersons(persons.filter((person) => person.name !== newName));\n          });\n      }\n    }\n  };\n\n  const handleNewFilter = (event) => {\n    setFilter(event.target.value);\n  };\n\n  const handleNewNumber = (event) => {\n    setNewNumber(event.target.value);\n  };\n\n  const handleNewName = (event) => {\n    setNewName(event.target.value);\n  };\n\n  const handleDelete = (personName, personID) => {\n    if (window.confirm(`Are you sure you want to delete ${personName}`)) {\n      personService\n        .remove(personID)\n        .then(setPersons(persons.filter((person) => person.id !== personID)))\n        .catch((error) => {\n          console.log(error);\n        });\n    }\n  };\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification\n        message={notification.message}\n        messageType={notification.messageType}\n      />\n      <Filter handleNewFilter={handleNewFilter} />\n      <PersonForm\n        handleAddPerson={handleAddPerson}\n        handleNewNumber={handleNewNumber}\n        handleNewName={handleNewName}\n      />\n      <h2>Numbers</h2>\n      <PersonList\n        persons={persons}\n        filter={filter}\n        handleDelete={handleDelete}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}